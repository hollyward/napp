"use strict";
/*
 * Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var NoLogger_1 = require("./NoLogger");
var DefaultLogger_1 = require("./DefaultLogger");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
    LogLevel[LogLevel["TRACE"] = 4] = "TRACE";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var LoggingService = /** @class */ (function () {
    function LoggingService(externalLogger) {
        if (externalLogger === void 0) { externalLogger = null; }
        if (externalLogger != null) {
            this.logger = externalLogger;
        }
        if (this.logger == null) {
            this.logger = new DefaultLogger_1.DefaultLogger();
        }
    }
    LoggingService.getLoggingService = function () {
        if (LoggingService.loggingService == null) {
            LoggingService.initialize(null);
        }
        return LoggingService.loggingService;
    };
    LoggingService.initialize = function (loggerModule) {
        if (loggerModule === void 0) { loggerModule = null; }
        if (typeof loggerModule === 'string') {
            if (loggerModule === 'off') {
                LoggingService.loggingService = new LoggingService(new NoLogger_1.NoLogger());
            }
            else if (loggerModule === 'default') {
                LoggingService.loggingService = new LoggingService();
            }
            else {
                throw new RangeError('Logging type unknown: ' + loggerModule);
            }
        }
        else {
            LoggingService.loggingService = new LoggingService(loggerModule);
        }
    };
    LoggingService.prototype.log = function (level, className, message, furtherInfo) {
        this.logger.log(level, className, message, furtherInfo);
    };
    LoggingService.prototype.error = function (className, message, furtherInfo) {
        if (furtherInfo === void 0) { furtherInfo = null; }
        this.log(LogLevel.ERROR, className, message, furtherInfo);
    };
    LoggingService.prototype.warn = function (className, message, furtherInfo) {
        if (furtherInfo === void 0) { furtherInfo = null; }
        this.log(LogLevel.WARN, className, message, furtherInfo);
    };
    LoggingService.prototype.info = function (className, message, furtherInfo) {
        if (furtherInfo === void 0) { furtherInfo = null; }
        this.log(LogLevel.INFO, className, message, furtherInfo);
    };
    LoggingService.prototype.debug = function (className, message, furtherInfo) {
        if (furtherInfo === void 0) { furtherInfo = null; }
        this.log(LogLevel.DEBUG, className, message, furtherInfo);
    };
    LoggingService.prototype.trace = function (className, message, furtherInfo) {
        if (furtherInfo === void 0) { furtherInfo = null; }
        this.log(LogLevel.TRACE, className, message, furtherInfo);
    };
    return LoggingService;
}());
exports.LoggingService = LoggingService;
//# sourceMappingURL=LoggingService.js.map