"use strict";
/*
 * Copyright (c) 2008-2018, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var TopicOverloadPolicy_1 = require("../proxy/topic/TopicOverloadPolicy");
exports.TopicOverloadPolicy = TopicOverloadPolicy_1.TopicOverloadPolicy;
var ClientNetworkConfig_1 = require("./ClientNetworkConfig");
exports.ClientNetworkConfig = ClientNetworkConfig_1.ClientNetworkConfig;
var SerializationConfig_1 = require("./SerializationConfig");
exports.SerializationConfig = SerializationConfig_1.SerializationConfig;
var GroupConfig_1 = require("./GroupConfig");
exports.GroupConfig = GroupConfig_1.GroupConfig;
var ReliableTopicConfig_1 = require("./ReliableTopicConfig");
exports.ReliableTopicConfig = ReliableTopicConfig_1.ReliableTopicConfig;
var InMemoryFormat_1 = require("./InMemoryFormat");
exports.InMemoryFormat = InMemoryFormat_1.InMemoryFormat;
var EvictionPolicy_1 = require("./EvictionPolicy");
exports.EvictionPolicy = EvictionPolicy_1.EvictionPolicy;
var NearCacheConfig_1 = require("./NearCacheConfig");
exports.NearCacheConfig = NearCacheConfig_1.NearCacheConfig;
var ListenerConfig_1 = require("./ListenerConfig");
var FlakeIdGeneratorConfig_1 = require("./FlakeIdGeneratorConfig");
exports.FlakeIdGeneratorConfig = FlakeIdGeneratorConfig_1.FlakeIdGeneratorConfig;
var ConfigPatternMatcher_1 = require("./ConfigPatternMatcher");
/**
 * Top level configuration object of Hazelcast client. Other configurations items are properties of this object.
 */
var ClientConfig = /** @class */ (function () {
    function ClientConfig() {
        this.configPatternMatcher = new ConfigPatternMatcher_1.ConfigPatternMatcher();
        this.properties = {
            'hazelcast.client.heartbeat.interval': 5000,
            'hazelcast.client.heartbeat.timeout': 60000,
            'hazelcast.client.invocation.retry.pause.millis': 1000,
            'hazelcast.client.invocation.timeout.millis': 120000,
            'hazelcast.invalidation.reconciliation.interval.seconds': 60,
            'hazelcast.invalidation.max.tolerated.miss.count': 10,
            'hazelcast.invalidation.min.reconciliation.interval.seconds': 30
        };
        this.groupConfig = new GroupConfig_1.GroupConfig();
        this.networkConfig = new ClientNetworkConfig_1.ClientNetworkConfig();
        this.customCredentials = null;
        this.listeners = new ListenerConfig_1.ListenerConfig();
        this.listenerConfigs = [];
        this.serializationConfig = new SerializationConfig_1.SerializationConfig();
        this.reliableTopicConfigs = {};
        this.nearCacheConfigs = {};
        this.flakeIdGeneratorConfigs = {};
    }
    ClientConfig.prototype.getReliableTopicConfig = function (name) {
        var matching = this.lookupByPattern(this.reliableTopicConfigs, name);
        var config;
        if (matching != null) {
            config = matching.clone();
        }
        else {
            config = new ReliableTopicConfig_1.ReliableTopicConfig();
        }
        config.name = name;
        return config;
    };
    ClientConfig.prototype.getNearCacheConfig = function (name) {
        var matching = this.lookupByPattern(this.nearCacheConfigs, name);
        if (matching == null) {
            return null;
        }
        var config = matching.clone();
        config.name = name;
        return config;
    };
    ClientConfig.prototype.getFlakeIdGeneratorConfig = function (name) {
        var matching = this.lookupByPattern(this.flakeIdGeneratorConfigs, name);
        var config;
        if (matching != null) {
            config = matching.clone();
        }
        else {
            config = new FlakeIdGeneratorConfig_1.FlakeIdGeneratorConfig();
        }
        config.name = name;
        return config;
    };
    ClientConfig.prototype.lookupByPattern = function (config, name) {
        if (config[name] != null) {
            return config[name];
        }
        var matchingPattern = this.configPatternMatcher.matches(Object.keys(config), name);
        if (matchingPattern != null) {
            return config[matchingPattern];
        }
        if (config['default'] != null) {
            return config['default'];
        }
        return null;
    };
    return ClientConfig;
}());
exports.ClientConfig = ClientConfig;
//# sourceMappingURL=Config.js.map